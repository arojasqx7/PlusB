@model Domain.Entities.Ticket
@{
    ViewBag.Title = "Assigned";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .txtHover:hover
    {
        color:#dfae1f;
    }
    .timeline:before
    {
        bottom:-30px;
    }
</style>

<section class="content-header">
        <label id="ticketID" style="display:none;">@Html.DisplayFor(model => model.Id)</label>

        <h1>Incident No: @Html.DisplayFor(model => model.Id)</h1>
        <h4>
            Status:
            @if (Model.Status == "Open")
            {
                <span class="label label-danger">@Html.DisplayFor(model => model.Status)</span>
            }
            else if (Model.Status == "Work In Progress")
            {
                <span class="label label-warning">@Html.DisplayFor(model => model.Status)</span>
            }
            else if (Model.Status == "Solution Suggested")
            {
                <span class="label label-success">@Html.DisplayFor(model => model.Status)</span>
            }
            else if (Model.Status == "Callback")
            {
                <span class="label label-default">@Html.DisplayFor(model => model.Status)</span>
            }
            else
            {
                <span class="label label-success">@Html.DisplayFor(model => model.Status)</span>

            }
        </h4>
        <h4>Company: @Html.DisplayFor(model => model.Customer.CompanyName)</h4>
        <h4>Creator: @Html.DisplayFor(model => model.Creator)</h4>
    @using (Html.BeginForm("UpdateStatus", "Tickets", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)

       <div class="col-xs-4" style="float:right;margin-top:-90px; margin-right:-15px;display:inline-flex;">
                @Html.DropDownListFor(x => x.Status, new List<SelectListItem>
               {
                  new SelectListItem() {Text = "Work In Progress", Value="Work In Progress"},
                  new SelectListItem() {Text = "Callback", Value="Callback"},
                  new SelectListItem() {Text = "Pending Customer", Value="Pending Customer"},
                  new SelectListItem() {Text = "Solution Suggested", Value="Solution Suggested"},
                  new SelectListItem() {Text = "Closed", Value="Closed"}
               }, "--Select Status--", new { @class = "form-control select2", @style = "background-color:#fff;" })

               <button type="submit" class="btn btn-success" title="Update Status" data-toggle='tooltip' style="margin-left:10px;">
                    <span class="glyphicon glyphicon-refresh"></span>
               </button>
        </div>
    }
</section>

<br />
<section class="content">
    <div class="row">
        <div class="col-xs-12">
            <div class="box box-solid">
                <div class="box-header">
                    <i class="fa fa-bar-chart-o"></i>
                    <h3 class="box-title">Risk Analysis Monitor </h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-default btn-sm" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="box-body">
                    <div class="row">
                        <div class="col-xs-6 col-md-4 text-center">
                            <input id="periodicUpdateRiskAvg" type="text" class="knob" data-skin="tron" data-thickness="0.2" data-width="90" data-height="90" data-fgColor="#3c8dbc" data-readonly="true" data-toggle="tooltip" title="Hours without update risk">
                            <div class="knob-label"><strong>Number of hours without update.</strong></div>
                            <br />
                            <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#modal-update">Show actions to take</button>
                        </div>
                        <div class="col-xs-6 col-md-4 text-center">
                            <input id="escalationRiskAvg" type="text" class="knob" data-skin="tron" data-thickness="0.2" data-width="120" data-height="120" data-fgColor="#f56954" data-readonly="true" data-toggle="tooltip" title="Escalation risk">
                            <div class="knob-label"><strong>Escalation Risk</strong></div>
                            <br />
                            <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#modal-escalation">Show actions to take</button>
                        </div>
                        <div class="col-xs-6 col-md-4 text-center">
                            <input id="failureSLARisk" type="text" class="knob" value="10" data-skin="tron" data-thickness="0.1" data-width="90" data-height="90" data-fgColor="#00a65a" data-readonly="true" data-toggle="tooltip" title="Failure to meet SLA risk">
                            <div class="knob-label"><strong>Failure to meet SLAs</strong></div>
                            <br />
                            <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#modal-meetSLA">Show actions to take</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.row -->
    <br />
    <div class="row">
        <div class="col-xs-12">
            <div class="box box-solid">
                <div class="box-header">
                    <h2 class="box-title ">Subject: <span class="text-bold txtHover" style="margin-left:25px;">@Html.DisplayFor(model => model.ShortDescription)</span></h2>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-default btn-sm" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Date & Time Opened: </strong> <span class="txtHover"> @Html.DisplayFor(model => model.Date) @Html.DisplayFor(model => model.OpenTime)</span>
                            <br /><br />
                            <strong>Environment:</strong>  <span class="txtHover"> @Html.DisplayFor(model => model.Environment)</span>
                            <br /><br />
                            <strong>Description:</strong>  <span class="txtHover"> @Html.DisplayFor(model => model.LongDescription)</span>  
                    </div>
                        <div class="col-md-6">
                            <strong>Assignment Date:</strong> <span class="txtHover"> @Html.DisplayFor(model => model.AssignmentDate)  @Html.DisplayFor(model => model.AssignmentTime)</span>
                            <br />
                            <strong>Severity:</strong> <span class="txtHover"> @Html.DisplayFor(model => model.Severity.SeverityName)</span>
                            <br />
                            <strong>Impact:</strong> <span class="txtHover"> @Html.DisplayFor(model => model.Impact.ImpactName)</span>
                            <br />
                            <strong>Technology:</strong> <span class="txtHover"> @Html.DisplayFor(model => model.Technology.Name)</span>
                            <br />
                            <strong>Task:</strong>  <span class="txtHover"> @Html.DisplayFor(model => model.TaskType.TaskName)</span>
                         </div>
                   </div>

                    <br /><br />
                    <div class="box-header">
                        <h2 class="box-title"><span style="margin-left:-10px;">Attachments</span></h2>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <!--Renders the attachment list inside tickets-->
                            @Html.Action("FileDetails", "Attachment", new { id = Model.Id })
                        </div>
                    </div>

                    <br />
                    <div class="box-header">
                        <h2 class="box-title"><span style="margin-left:-10px;">Add Activity</span></h2>
                    </div>
                            <!--Renders the text area to add a new activity-->
                            @Html.Action("addActivity", "TicketActivity", new { id = Model.Id})
                    <br /><br />

                    <div class="row">
                             <!--Renders the activity already added to the ticket-->
                            @Html.Action("insertedActivity", "TicketActivity", new { id = Model.Id })
                    </div>
                 </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade" id="modal-update">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">X</span>
                </button>
                <h4 class="modal-title">Hours without update details & Actions to take</h4>
            </div>
            <div class="modal-body">
                <p>Hours with no update: <strong>@Convert.ToInt32(TempData["PeriodicUpdateRisk"])</strong></p>
                <p>Actions to take:</p>

                    @if(Convert.ToInt32(TempData["PeriodicUpdateRisk"]) >= 95)
                    {
                       <ul>
                           <li><span class="glyphicon glyphicon-asterisk"></span> Escalate the ticket to next level support.</li>
                           <li><span class="glyphicon glyphicon-asterisk"></span> Send ASAP a report to your manager why you did not update this ticket.</li>
                       </ul>
                    }
                    else if (Convert.ToInt32(TempData["PeriodicUpdateRisk"]) >= 60 && Convert.ToInt32(TempData["PeriodicUpdateRisk"]) <= 94)
                    {
                        <ul>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Send ASAP an update to the customer.</li>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Call the customer to let him know about next steps.</li>
                        </ul>
                    }
                    else
                    {
                        <ul>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Keep updating the ticket.</li>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Generate documentation about possible fixes.</li>
                        </ul>
                    }
            </div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-escalation">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">X</span>
                </button>
                <h4 class="modal-title">Escalation risk details & Actions to take</h4>
            </div>
            <div class="modal-body">
                <p>Escalation Risk percentage: <strong>@Convert.ToInt32(TempData["escalationRisk"])</strong></p>
                <p>Actions to take:</p>

                    @if (Convert.ToInt32(TempData["escalationRisk"]) >= 95)
                    {
                        <ul>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Contact your manager to alert about this ticket.</li>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Call inmediately the customer with a valid action plan to resolve.</li>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Elevate the ticket to next level support.</li>
                        </ul>
                    }
                    else if (Convert.ToInt32(TempData["escalationRisk"]) >= 60 && Convert.ToInt32(TempData["escalationRisk"]) <= 94)
                    {
                        <ul>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Call ASAP the customer with a valid update.</li>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Involve extra resources help.</li>
                        </ul>
                    }
                    else
                    {
                        <ul>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Keep updating the ticket.</li>
                            <li><span class="glyphicon glyphicon-asterisk"></span> Alert the customer about next steps to implement.</li>
                        </ul>
                    }
            </div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-meetSLA">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">X</span>
                </button>
                <h4 class="modal-title">Failure to meet SLA risk details & Actions to take</h4>
            </div>
            <div class="modal-body">
                <p>Escalation Risk percentage: <strong>@Convert.ToInt32(TempData["SLAFailureRisk"])</strong></p>
                <p>Actions to take:</p>

                @if (Convert.ToInt32(TempData["SLAFailureRisk"]) >= 80)
                {
                    <ul>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Create an action plan to tackle issues on this ticket.</li>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Provide a true time resolution to the customer.</li>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Alert your manager about this ticket.</li>
                    </ul>
                }
                else if (Convert.ToInt32(TempData["SLAFailureRisk"]) >= 40 && Convert.ToInt32(TempData["SLAFailureRisk"]) <= 79)
                {
                    <ul>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Generate documentation and investigate all scenarios and solutions.</li>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Involve extra resources help.</li>
                    </ul>
                }
                else
                {
                    <ul>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Call the customer and try to resolve the issue on the call.</li>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Alert the customer about next steps to implement.</li>
                        <li><span class="glyphicon glyphicon-asterisk"></span> Keep close contact</li>
                    </ul>
                }
            </div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>

@section Scripts{
@Scripts.Render("~/Scripts/Modals.js")

<script>
    $(document).ready(function () {
        $("#txtActivity").focus();
        var idTicket = $('#ticketID').text();

        $.ajax({
            url: '/Tickets/escalationRisk',
            data: { 'id': idTicket },
            type: 'GET',
            success: function (data) {
                $('#escalationRiskAvg').val(data).trigger('change');;
            },
            error: function () {
                alert('Error occured while getting Risk');
            }
        });

        $.ajax({
            url: '/Tickets/failureToMeetSLA',
            data: { 'id': idTicket },
            type: 'GET',
            success: function (data) {
                $('#failureSLARisk').val(data).trigger('change');;
            },
            error: function () {
                alert('Error occured while getting Risk');
            }
        });

        $.ajax({
            url: '/Tickets/periodicUpdateRisk',
            data: { 'id': idTicket },
            type: 'GET',
            success: function (data) {
                $('#periodicUpdateRiskAvg').val(data).trigger('change');;
            },
            error: function () {
                alert('Error occured while getting Risk');
            }
        });
    });

    $("#txtActivity").keyup(function () {
        if ($(this).val() == '') {
            $('#btnSave').hide();
        }
        else {
            $('#btnSave').show();
        }
    });
</script>
}